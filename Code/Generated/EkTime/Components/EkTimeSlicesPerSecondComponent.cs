namespace EchKode.PBMods.MissilePrediction.ECS
{
	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public partial class EkTimeContext
	{

		public EkTimeEntity slicesPerSecondEntity { get { return GetGroup(EkTimeMatcher.SlicesPerSecond).GetSingleEntity(); } }
		public SlicesPerSecondComponent slicesPerSecond { get { return slicesPerSecondEntity.slicesPerSecond; } }
		public bool hasSlicesPerSecond { get { return slicesPerSecondEntity != null; } }

		public EkTimeEntity SetSlicesPerSecond(int newI)
		{
			if (hasSlicesPerSecond)
			{
				throw new Entitas.EntitasException("Could not set SlicesPerSecond!\n" + this + " already has an entity with SlicesPerSecondComponent!",
					"You should check if the context already has a slicesPerSecondEntity before setting it or use context.ReplaceSlicesPerSecond().");
			}
			var entity = CreateEntity();
			entity.AddSlicesPerSecond(newI);
			return entity;
		}

		public void ReplaceSlicesPerSecond(int newI)
		{
			var entity = slicesPerSecondEntity;
			if (entity == null)
			{
				entity = SetSlicesPerSecond(newI);
			}
			else
			{
				entity.ReplaceSlicesPerSecond(newI);
			}
		}

		public void RemoveSlicesPerSecond()
		{
			slicesPerSecondEntity.Destroy();
		}
	}

	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public partial class EkTimeEntity
	{

		public SlicesPerSecondComponent slicesPerSecond { get { return (SlicesPerSecondComponent)GetComponent(EkTimeComponentsLookup.SlicesPerSecond); } }
		public bool hasSlicesPerSecond { get { return HasComponent(EkTimeComponentsLookup.SlicesPerSecond); } }

		public void AddSlicesPerSecond(int newI)
		{
			var index = EkTimeComponentsLookup.SlicesPerSecond;
			var component = (SlicesPerSecondComponent)CreateComponent(index, typeof(SlicesPerSecondComponent));
			component.i = newI;
			AddComponent(index, component);
		}

		public void ReplaceSlicesPerSecond(int newI)
		{
			var index = EkTimeComponentsLookup.SlicesPerSecond;
			var component = (SlicesPerSecondComponent)CreateComponent(index, typeof(SlicesPerSecondComponent));
			component.i = newI;
			ReplaceComponent(index, component);
		}

		public void RemoveSlicesPerSecond()
		{
			RemoveComponent(EkTimeComponentsLookup.SlicesPerSecond);
		}
	}

	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public sealed partial class EkTimeMatcher
	{

		static Entitas.IMatcher<EkTimeEntity> _matcherSlicesPerSecond;

		public static Entitas.IMatcher<EkTimeEntity> SlicesPerSecond
		{
			get
			{
				if (_matcherSlicesPerSecond == null)
				{
					var matcher = (Entitas.Matcher<EkTimeEntity>)Entitas.Matcher<EkTimeEntity>.AllOf(EkTimeComponentsLookup.SlicesPerSecond);
					matcher.componentNames = EkTimeComponentsLookup.componentNames;
					_matcherSlicesPerSecond = matcher;
				}

				return _matcherSlicesPerSecond;
			}
		}
	}
}
